;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Kiwix nsis code for make the installer ;
; Please, see the README file            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Define the Bitmaps used in the installer
!define MUI_WELCOMEFINISHPAGE_BITMAP "welcome_finish.bmp" ;Welcome image 164x314px
!define MUI_HEADERIMAGE 
!define MUI_HEADERIMAGE_RIGHT ;Header position
!define MUI_HEADERIMAGE_BITMAP "header.bmp" ;Header installer image 500x63px

; Define the icons for the installer and uninstaller
!define MUI_ICON  "install.ico"
!define MUI_UNICON "uninstall.ico"

; Define User Interface additional stuff
!define MUI_FINISHPAGE_RUN "kiwix\kiwix.exe"

; Show a warning if the user want to close the install
!define MUI_ABORTWARNING

; Define Application and Local Applicaiont Data paths
!define CSIDL_APPDATA '0x1A' 
!define CSIDL_LOCALAPPDATA '0x1C'

; Define installer registry string contants
!define PRODUCT_NAME "kiwix"
!define PRODUCT_VERSION "0.9 svn"
!define PRODUCT_PUBLISHER "Kiwix"
!define PRODUCT_WEB_SITE "http://www.kiwix.org"

; Define installer Regkey values
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"

; Mandatory plugins
!include "MUI2.nsh"
!include "InstallOptions.nsh"
!include "WinMessages.nsh"
!include "LogicLib.nsh"

; Request application privileges for Windows Vista
RequestExecutionLevel user

; Installer variables declarations
SetCompressor lzma
Name "${PRODUCT_NAME} ${PRODUCT_VERSION}"
OutFile "kiwix-install.exe"
ShowInstDetails show
ShowUnInstDetails show
InstallDir "$PROGRAMFILES\kiwix"

; Reserve files to make the decompression faster
ReserveFile "kiwix-install.ini"
!insertmacro MUI_RESERVEFILE_LANGDLL

; Global variables
Var PAGETOSHOW
Var CONTENTSIZE

; Create Welcome page
Page custom .onWelcomePageCreate .onWelcomePageLeave

; Create License page
!define MUI_PAGE_CUSTOMFUNCTION_PRE .onLicensePageCreate
!define MUI_PAGE_CUSTOMFUNCTION_SHOW .onCommonPageShow
!define MUI_PAGE_CUSTOMFUNCTION_LEAVE showWelcomePage
!insertmacro MUI_PAGE_LICENSE "COPYING"

; Create Directory page
!define MUI_PAGE_CUSTOMFUNCTION_PRE .onDirectoryPageCreate
!define MUI_PAGE_CUSTOMFUNCTION_SHOW .onCommonPageShow
!define MUI_PAGE_CUSTOMFUNCTION_LEAVE showWelcomePage
!insertmacro MUI_PAGE_DIRECTORY

; Create install files page
!define MUI_PAGE_CUSTOMFUNCTION_SHOW .onInstFilesShow
!define MUI_CUSTOMFUNCTION_ABORT rollback
!insertmacro MUI_PAGE_INSTFILES

; Create end page
!insertmacro MUI_PAGE_FINISH

; The language selection dialog of Modern UI hides languages
; unsupported by the user's selected codepage by default.
; This is to avoid this behaviour
; !define MUI_LANGDLL_ALLLANGUAGES

; Insert language macro to get the interface common sentences localized
!insertmacro MUI_LANGUAGE "Arabic"
!insertmacro MUI_LANGUAGE "English"
!insertmacro MUI_LANGUAGE "French"
!insertmacro MUI_LANGUAGE "German"
!insertmacro MUI_LANGUAGE "Spanish"
!insertmacro MUI_LANGUAGE "SpanishInternational"
!insertmacro MUI_LANGUAGE "SimpChinese"
!insertmacro MUI_LANGUAGE "TradChinese"
!insertmacro MUI_LANGUAGE "Japanese"
!insertmacro MUI_LANGUAGE "Korean"
!insertmacro MUI_LANGUAGE "Italian"
!insertmacro MUI_LANGUAGE "Dutch"
!insertmacro MUI_LANGUAGE "Danish"
!insertmacro MUI_LANGUAGE "Swedish"
!insertmacro MUI_LANGUAGE "Norwegian"
!insertmacro MUI_LANGUAGE "NorwegianNynorsk"
!insertmacro MUI_LANGUAGE "Finnish"
!insertmacro MUI_LANGUAGE "Greek"
!insertmacro MUI_LANGUAGE "Russian"
!insertmacro MUI_LANGUAGE "Portuguese"
!insertmacro MUI_LANGUAGE "PortugueseBR"
!insertmacro MUI_LANGUAGE "Polish"
!insertmacro MUI_LANGUAGE "Ukrainian"
!insertmacro MUI_LANGUAGE "Czech"
!insertmacro MUI_LANGUAGE "Slovak"
!insertmacro MUI_LANGUAGE "Croatian"
!insertmacro MUI_LANGUAGE "Bulgarian"
!insertmacro MUI_LANGUAGE "Hungarian"
!insertmacro MUI_LANGUAGE "Thai"
!insertmacro MUI_LANGUAGE "Romanian"
!insertmacro MUI_LANGUAGE "Latvian"
!insertmacro MUI_LANGUAGE "Macedonian"
!insertmacro MUI_LANGUAGE "Estonian"
!insertmacro MUI_LANGUAGE "Turkish"
!insertmacro MUI_LANGUAGE "Lithuanian"
!insertmacro MUI_LANGUAGE "Slovenian"
!insertmacro MUI_LANGUAGE "Serbian"
!insertmacro MUI_LANGUAGE "SerbianLatin"
!insertmacro MUI_LANGUAGE "Farsi"
!insertmacro MUI_LANGUAGE "Hebrew"
!insertmacro MUI_LANGUAGE "Indonesian"
!insertmacro MUI_LANGUAGE "Mongolian"
!insertmacro MUI_LANGUAGE "Luxembourgish"
!insertmacro MUI_LANGUAGE "Albanian"
!insertmacro MUI_LANGUAGE "Breton"
!insertmacro MUI_LANGUAGE "Belarusian"
!insertmacro MUI_LANGUAGE "Icelandic"
!insertmacro MUI_LANGUAGE "Malay"
!insertmacro MUI_LANGUAGE "Bosnian"
!insertmacro MUI_LANGUAGE "Kurdish"
!insertmacro MUI_LANGUAGE "Irish"
!insertmacro MUI_LANGUAGE "Uzbek"
!insertmacro MUI_LANGUAGE "Galician"
!insertmacro MUI_LANGUAGE "Afrikaans"
!insertmacro MUI_LANGUAGE "Catalan"
!insertmacro MUI_LANGUAGE "Esperanto"

; This callback will be called when the installer is nearly finished initializing. 
Function .onInit
  __CONTENTSIZE__
  !insertmacro INSTALLOPTIONS_EXTRACT "kiwix-install.ini"
  !insertmacro MUI_LANGDLL_DISPLAY
FunctionEnd

; Triggered by welcome page creation
Function .onWelcomePageCreate
  !insertmacro INSTALLOPTIONS_DISPLAY "kiwix-install.ini"
FunctionEnd

; Abort installation
Function rollback
	Delete "$INSTDIR\${PRODUCT_NAME}.url"
	Delete "$INSTDIR\uninst.exe"
	Delete "$SMPROGRAMS\kiwix\Uninstall.lnk"
	Delete "$SMPROGRAMS\kiwix\kiwix.lnk"
	Delete "$SMPROGRAMS\kiwix\kiwix Website.lnk"

	RMDir /R "$SMPROGRAMS\kiwix"
	RMDir /R "$INSTDIR"
	DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"

	SetAutoClose true
FunctionEnd

; Triggered by welcome page leaving
Function .onWelcomePageLeave
  !insertmacro INSTALLOPTIONS_READ $R0 "kiwix-install.ini" "Settings" "State"
  ${Select} $R0
    ${Case} 0
      Call isEnoughDisqueSpace
      StrCpy $PAGETOSHOW "none"
    ${Case} 1
      StrCpy $PAGETOSHOW "license"
    ${Case} 3
      StrCpy $PAGETOSHOW "directory"
    ${Default}
      Abort
  ${EndSelect}
FunctionEnd

Function .onCommonPageShow
  ${If} $PAGETOSHOW != "license"
    GetDlgItem $R0 $HWNDPARENT 1
    SendMessage $R0 ${WM_SETTEXT} 0 "STR:OK"
  ${EndIf}
FunctionEnd

Function showWelcomePage
  SendMessage $HWNDPARENT ${WM_COMMAND} 3 0
  Abort
FunctionEnd

Function .onLicensePageCreate
  Push "license"
  Call shouldSkipPage
  Pop $R0
  ${If} $R0 == 1
    Abort
  ${EndIf}
FunctionEnd

Function .onDirectoryPageCreate
  Push "directory"
  Call shouldSkipPage
  Pop $R0
  ${If} $R0 == 1
    Abort
  ${EndIf}
FunctionEnd

; Push textual page id and it returns 1 if the page should be skipped
Function shouldSkipPage
  Exch $R0
  ${If} $PAGETOSHOW == $R0
    StrCpy $R0 0
  ${Else}
    StrCpy $R0 1
  ${EndIf}
  Exch $R0
FunctionEnd

; Customize the instFile page
; Able the Cancel button
Function .onInstFilesShow
  GetDlgItem $0 $HWNDPARENT 2
  EnableWindow $0 1
FunctionEnd

Function isEnoughDisqueSpace
  StrCpy $0 "$INSTDIR" ; check how much free space is left for the path C:\Windows
  Call FreeDiskSpace

  StrCpy $2 $CONTENTSIZE ; Free space required by you (in kb)
  System::Int64Op $1 > $2 ; Compare the space required and the space available
  Pop $3 ; Get the result ...
 
  IntCmp $3 1 okay ; ... and compare it
  MessageBox MB_OK "Error: Not enough disk space!"
  Call showWelcomePage
  okay:
FunctionEnd

; Extract or Copy all necessary files and do necessary changes in the registry
Section
; Create directory
  CreateDirectory "$INSTDIR"

; Insert here the command to copy files
  __FILES_TO_INSTALL__	

; Delete the "live" file which should never be installed
  Delete "$INSTDIR\live"

; Create shorcuts for Kiwix Seb Site and essential binaries
  SetOutPath $INSTDIR
  WriteIniStr "$INSTDIR\${PRODUCT_NAME}.url" "InternetShortcut" "URL" "${PRODUCT_WEB_SITE}"
  CreateDirectory "$SMPROGRAMS\Kiwix"
  CreateShortCut "$SMPROGRAMS\Kiwix\Kiwix.lnk" "$INSTDIR\kiwix\kiwix.exe"
  CreateShortCut "$SMPROGRAMS\Kiwix\Kiwix Website.lnk" "$INSTDIR\${PRODUCT_NAME}.url"
  CreateShortCut "$SMPROGRAMS\Kiwix\Uninstall.lnk" "$INSTDIR\uninst.exe"

; Write in the registry necessary keys to uninstall Kiwix
  WriteUninstaller "$INSTDIR\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
SectionEnd

Function un.onUninstSuccess
	HideWindow
	MessageBox MB_ICONINFORMATION|MB_OK "$(^Name) was successfully removed from your computer."
FunctionEnd

; You don' t need to specify file to remove since we remove the whole
; $INSTDIR folder recursivly.
Section Uninstall
	Delete "$INSTDIR\${PRODUCT_NAME}.url"
	Delete "$INSTDIR\uninst.exe"
	Delete "$SMPROGRAMS\kiwix\Uninstall.lnk"
	Delete "$SMPROGRAMS\kiwix\kiwix.lnk"
	Delete "$SMPROGRAMS\kiwix\kiwix Website.lnk"

	RMDir /R "$SMPROGRAMS\kiwix"
	RMDir /R "$INSTDIR"
	DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"

	MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Do you want to KEEP your personnal datas (bookmarks, notes) ?" IDYES +2
	Call un.removeProfile

	SetAutoClose true
SectionEnd

; Remove your Kiwix profile from your user directory
Function un.removeProfile
    System::Call 'shell32::SHGetSpecialFolderPathA(i $HWNDPARENT, t .r1, i ${CSIDL_APPDATA}, b 'false') i r0'
    RMDir /r "$1\www.kiwix.org"
    System::Call 'shell32::SHGetSpecialFolderPathA(i $HWNDPARENT, t .r1, i ${CSIDL_LOCALAPPDATA}, b 'false') i r0'
    RMDir /r "$1\www.kiwix.org"
FunctionEnd

!define sysGetDiskFreeSpaceEx 'kernel32::GetDiskFreeSpaceExA(t, *l, *l, *l) i'
; $0 - Path to check (can be a drive 'C:' or a full path 'C:\Windows')
; $1 - Return value, free space in kb
function FreeDiskSpace
  System::Call '${sysGetDiskFreeSpaceEx}(r0,.,,.r1)'
  ; convert the large integer byte values into managable kb
  System::Int64Op $1 / 1024
  ; Return the free space
  Pop $1
functionend
