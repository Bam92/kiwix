/*
 * Copyright 2013 Rashiq Ahmad <rashiq.z@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU  General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 */

package org.kiwix.kiwixmobile

import android.os.Parcel
import android.os.Parcelable

// This items class stores the Data for the ArrayAdapter.
// We Have to implement Parcelable, so we can store ArrayLists with this generic type in the Bundle
// of onSaveInstanceState() and retrieve it later on in onRestoreInstanceState()
class DataModel : Parcelable {

  // Interface that must be implemented and provided as a public CREATOR field.
  // It generates instances of our Parcelable class from a Parcel.
  var CREATOR: Parcelable.Creator<DataModel> = object : Parcelable.Creator<DataModel> {

    override fun createFromParcel(source: Parcel): DataModel {
      return DataModel(source)
    }

    override fun equals(o: Any?): Boolean {
      return super.equals(o)
    }

    override fun hashCode(): Int {
      return super.hashCode()
    }

    override fun newArray(size: Int): Array<DataModel> {
      return arrayOfNulls(size)
    }
  }

  var title: String? = null
    private set

  val path: String

  constructor(title: String, path: String) {
    this.title = title
    this.path = path
  }

  // This constructor will be called when this class is generated by a Parcel.
  // We have to read the previously written Data in this Parcel.
  constructor(parcel: Parcel) {
    val data = arrayOfNulls<String>(2)
    parcel.readStringArray(data)
    title = data[0]
    title = data[1]
  }

  override fun describeContents(): Int {
    return 0
  }

  override fun writeToParcel(dest: Parcel, flags: Int) {
    // Write the data to the Parcel, so we can restore this Data later on.
    // It will be restored by the DataModel(Parcel parcel) constructor.
    dest.writeArray(arrayOf<String>(title, path))
  }

  // Override equals(Object) so we can compare objects. Specifically, so List#contains() works.
  override fun equals(`object`: Any?): Boolean {
    var isEqual = false

    if (`object` != null && `object` is DataModel) {
      isEqual = (this.path == (`object` as DataModel?).path)
    }

    return isEqual
  }
}
