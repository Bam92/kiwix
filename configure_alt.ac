# autotools initializations
AC_INIT([kiwix], [0.9])

AC_CONFIG_AUX_DIR([.]) # where are autotools scripts located

AM_INIT_AUTOMAKE
AM_MAINTAINER_MODE

# find C compiler
AC_PROG_CC

# find C++ compiler
AC_PROG_CXX
AC_CHECK_TOOL(HAVE_CXX, "$CXX")
if test [ ! "$HAVE_CXX" ]
then 
    AC_MSG_ERROR([[cannot find any C++ compiler]])
fi

AC_CHECK_TOOL(HAVE_ZIP, zip)

# Check if running on Windows
AC_CHECK_PROG(HAVE_CL, cl.exe, yes, no)
AM_CONDITIONAL([IS_WIN], [test "$HAVE_CL" = yes])
AM_CONDITIONAL([IS_POSIX], [test ! "$HAVE_CL" = yes])
if test [ "$HAVE_CL" = yes ]
then
    
fi

# Check if running on OSX
AC_CHECK_PROG(HAVE_XCODE, Xcode, yes, no, [$PATH$PATH_SEPARATOR/Developer/Applications/Xcode.app/Contents/MacOS/$PATH_SEPARATOR])
AM_CONDITIONAL([IS_OSX], [test "$HAVE_XCODE" = yes])
if test [ "$HAVE_XCODE" = yes ]
then
    IS_OSX=1
fi

# check if running on Linux
AM_CONDITIONAL([IS_LINUX], [test "$IS_POSIX" -a ! "$IS_OSX"])

# Set current language to C++
AC_LANG(C++)

# Current path
CURRENT_PATH=`pwd`

# Check if their is a Perl binary
AC_CHECK_TOOL(HAVE_PERL, perl)

# Check the existence of stat64 (to handle file >2GB) in the libc
AC_CHECK_FUNCS([stat64])

# Generate the headers
AC_CONFIG_HEADERS([src/zimlib/src/config.h])

# compilation tools
# use HAVE_


# Dependencies

SELF="SELF"
DEP_PATH="${CURRENT_PATH}/src/dependencies"

STATIC_BUILD=0

GECKO_SDK_PATH=""
COMPILE_GECKO_SDK=0
COMPILED_GECKO_SDK_PATH="${DEP_PATH}/xulrunner-sdk/sdk/"

ZLIB_LDFLAGS=""
COMPILE_ZLIB=0
COMPILED_ZLIB_LDFLAGS="${DEP_PATH}/zlib-1.2.3/libz.a"

XAPIAN_LDFLAGS=""
COMPILE_XAPIAN=0
if test [ "$IS_WIN" ] ; then
    COMPILED_XAPIAN_LDFLAGS="${DEP_PATH}/xapian-core-1.2.3/win32/Release/libs/libunicode.lib"
else
    COMPILED_XAPIAN_LDFLAGS="${DEP_PATH}/xapian-core-1.2.3/.libs/libxapian.a"
fi

ICU_LDFLAGS=""
COMPILE_ICU=0
if test [ "$IS_WIN" ] ; then
COMPILED_ICU_LDFLAGS="${DEP_PATH}/icu/source/lib/libicuio.a"
else
COMPILED_ICU_LDFLAGS="${DEP_PATH}/icu/lib/icuio.lib"
fi

# no win for sqlite as it is just a sub dependency of aria2
SQLITE_LDFLAGS=""
COMPILE_SQLITE=0
COMPILED_SQLITE_LDFLAGS="${DEP_PATH}/sqlite-autoconf-3071000/.libs/libsqlite3.a"

UUID_LDFLAGS=""
COMPILE_UUID=0
COMPILED_UUID_LDFLAGS="${DEP_PATH}/e2fsprogs-1.42/lib/uuid/libuuid.a"

# used only for building kiwix-serve. Not available on windows.
MICROHTTPD_LDFLAGS=""
COMPILE_MICROHTTPD=0
COMPILED_MICROHTTPD_LDFLAGS="${DEP_PATH}/libmicrohttpd-0.9.19/src/daemon/.libs/libmicrohttpd.a"

LZMA_LDFLAGS=""
COMPILE_LZMA=0
if test [ "$IS_WIN" ] ; then
    COMPILED_LZMA_LDFLAGS="${DEP_PATH}/xz/windows/liblzma.lib"
else
    COMPILED_LZMA_LDFLAGS="${DEP_PATH}/xz/src/liblzma/.libs/liblzma.a"
fi

CARES_LDFLAGS=""
COMPILE_CARES=0
COMPILED_CARES_LDFLAGS="${DEP_PATH}/c-ares-1.7.5/.libs/libcares.a"

ARIA2_LDFLAGS=""
COMPILE_ARIA2=1
COMPILED_ARIA2_LDFLAGS="${DEP_PATH}/aria2-1.14.1/src/aria2c"

CLUCENE_LDFLAGS=""
COMPILE_CLUCENE=0
COMPILED_CLUCENE_LDFLAGS="${DEP_PATH}/clucene-core-0.9.21b/src/.libs/libclucene.a"

WITH_CLUCENE=0

# individual dependency check


####################################################
############ GECKO SDK
####################################################

AC_ARG_WITH(gecko-sdk,
            [--with-gecko-sdk=DIR    Gecko SDK path],
            GECKO_SDK_PATH=`cd ${withval}; pwd`)

# try to find installed gecko-sdk. default to SELF
if test [ ! "$GECKO_SDK_PATH" = "$SELF" ]
then
    GECKO_SDK_PATH=`pkg-config --variable=sdkdir libxul`
    if test [ ! "$GECKO_SDK_PATH" ]
    then
        GECKO_SDK_PATH=$SELF
    fi
fi

if test [ "$GECKO_SDK_PATH" = "$SELF" ]
then
    COMPILE_GECKO_SDK=1
    GECKO_SDK_PATH=$COMPILED_GECKO_SDK_PATH
fi

# Gecko version
GECKO_VERSION=`grep MOZILLA_VERSION_U ${GECKO_SDK_PATH}/include/mozilla-config.h | cut --delimiter=" " -f3 | cut --delimiter="." -f1`
if [[ "$GECKO_VERSION" -gt "1" ]]
then
  CXXFLAGS="${CXXFLAGS} -std=gnu++0x -fexceptions -DMOZ_CPP_EXCEPTIONS"
  if [[ "$GECKO_VERSION" -lt "10" ]]
  then
    GECKO_OLD_BOOL_TYPE=1
  fi
fi
AC_MSG_RESULT(checking for Gecko version... ${GECKO_VERSION})
AM_CONDITIONAL([GECKO_OLD_BOOL_TYPE], [test "$GECKO_OLD_BOOL_TYPE"])

LIBXUL_CFLAGS="-I${GECKO_SDK_PATH}/sdk/include -I${GECKO_SDK_PATH}/include -fshort-wchar"
LIBXUL_LDFLAGS="-L${GECKO_SDK_PATH}/sdk/lib -lxpcomglue_s -lxul -lxpcom -lplds4 -lplc4 -lnspr4 -lpthread -ldl"
GECKO_IDL_PATH=${GECKO_SDK_PATH}/idl
if test [ ! -f "$GECKO_IDL_PATH/nsISupports.idl" ]
then
    AC_MSG_ERROR([[unable to find nsISupports.idl]])
fi
XPIDL_PATH=$GECKO_SDK_PATH/bin
AC_CHECK_TOOL(HAVE_XPIDL, "xpidl", [], $XPIDL_PATH)
if test [ "$HAVE_XPIDL" ]
then
    AC_PATH_PROG([XPIDL], "xpidl", [],  $XPIDL_PATH)
else
    # SDK 0.9 and further do not have an xpidl binary anymore
    # This is replace by the python script typelib.py and header.py
    AC_PATH_PROG([PYTHON], "python")             
    if test [ ! "$PYTHON" ]
    then
             AC_MSG_ERROR([[cannot find python]])
    fi

    if test [ ! -f "$GECKO_SDK_PATH/sdk/bin/header.py" -o ! -f "$GECKO_SDK_PATH/sdk/bin/typelib.py" ]
    then
        AC_MSG_ERROR([[unable to find neither the xpidl binary nor the typelib.py and header.py scripts]])
    fi

    HEADER_PY="$PYTHON $GECKO_SDK_PATH/sdk/bin/header.py"
    TYPELIB_PY="$PYTHON $GECKO_SDK_PATH/sdk/bin/typelib.py"
fi

####################################################
############ SRC/DEPENDENCIES Makefile
####################################################

if test [ "$IS_LINUX" ]
then
    DEP_LIST=""
    if test [ "$COMPILE_ZLIB" ] ; then
        DEP_LIST += $COMPILED_ZLIB_LDFLAGS
    fi
    if test [ "$COMPILE_ZLIB" ] ; then
        DEP_LIST += $COMPILED_ICU_LDFLAGS
    fi
else
  if test [ "$IS_OSX" ]
    then
        DEP_LIST=""
    else
        DEP_LIST=""
    fi
fi

# default CXXFLAGS
CXXFLAGS="${CFLAGS}"

# Configure the output files
AC_CONFIG_FILES([
  Makefile
  src/Makefile
  src/dependencies/Makefile
  src/zimlib/Makefile
  src/zimlib/src/Makefile
  src/ctpp2/Makefile
  src/ctpp2/src/Makefile
  src/pugixml/Makefile
  src/components/Makefile
  src/components/xapianAccessor/Makefile
  src/components/zimAccessor/Makefile
  src/components/zimXapianIndexer/Makefile
  src/components/zimCluceneIndexer/Makefile
  src/components/cluceneAccessor/Makefile
  src/components/contentManager/Makefile
  src/indexer/Makefile
  src/searcher/Makefile
  src/reader/Makefile
  src/installer/Makefile
  src/server/Makefile
  src/manager/Makefile
  kiwix/Makefile
  kiwix/chrome/Makefile
  kiwix/defaults/Makefile
  kiwix/components/Makefile
  desktop/Makefile
  static/Makefile
  etc/Makefile
])

AC_PROG_INSTALL
AC_OUTPUT
