
##################
# /!\ ATTENTION
# Before editting this file, please read the following:
#
# The platform is stored in IS_WIN, IS_OSX, IS_LINUX, IS_POSIX variables.
# Those are detected automatically from the host.
# Currently you can't cross-compile.
# IS_LINUX and IS_OSX implies IS_POSIX
#
# Each dependency have a set of variables set at the beginning of this file:
# X_CFLAGS, X_LDFLAGS: expected flags for shared linking.
# COMPILE_X: whether or not a download+compile will be performed.
# COMPILED_X_CFLAGS, COMPILED_X_LDFLAGS: expected flags once compiled locally.
# X_CFLAGS and X_LDFLAGS will be replace with COMPILED ones if appropriate.
#
# Each dependency has it own space for dependency resolution (although most
# look very similar)
# Process is the same for all:
# 1. get path from --with-x= and add it to LIBRARY_PATH
# 2. get path from --with-static-x (usually a .a file) and store it.
# 3. if no static requested, try to find the library automaticaly
# using pkg-config, AC_CHECK_LIB, etc. If not found, fail.
# 4. mark package for compile if static is SELF. If static is a path, try to
# find the archive and fail if not found.
##################



# autotools initializations
AC_INIT([kiwix], [0.9])
IS_WIN=0
IS_OSX=0
IS_POSIX=0
IS_LINUX=0

AC_CONFIG_AUX_DIR([.]) # where are autotools scripts located

AM_INIT_AUTOMAKE
AM_MAINTAINER_MODE

# find C compiler
AC_PROG_CC

# find C++ compiler
AC_PROG_CXX
AC_CHECK_TOOL(HAVE_CXX, "$CXX")
if test [ ! "$HAVE_CXX" ]
then 
    AC_MSG_ERROR([[cannot find any C++ compiler]])
fi

AC_CHECK_TOOL(HAVE_ZIP, zip)

# Check if running on Windows
AC_CHECK_PROG(HAVE_CL, cl.exe, yes, no)
AM_CONDITIONAL([IS_WIN], [test "$HAVE_CL" = yes])
AM_CONDITIONAL([IS_POSIX], [test ! "$HAVE_CL" = yes])
if test [ "$HAVE_CL" = yes ]
then
    IS_WIN=1
else
	IS_POSIX=1
fi

# Check if running on OSX
AC_CHECK_PROG(HAVE_XCODE, Xcode, yes, no, [$PATH$PATH_SEPARATOR/Developer/Applications/Xcode.app/Contents/MacOS/$PATH_SEPARATOR])
AM_CONDITIONAL([IS_OSX], [test "$HAVE_XCODE" = yes])
if test [ "$HAVE_XCODE" = yes ]
then
    IS_OSX=1
else
	if test [ $IS_POSIX -eq 1 ]
	then
		IS_LINUX=1
	else
		IS_LINUX=3
	fi
fi
# check if running on Linux
AM_CONDITIONAL([IS_LINUX], [test "$IS_POSIX" -a ! "$IS_OSX"])

# POSIX only checks
# Only for POSIX systems
if test [ "$IS_POSIX" ]
then

  # Chek zip
  AC_CHECK_TOOL([ZIP],[zip],[])
  if [[ "$ZIP" = "" ]]; then
    AC_MSG_ERROR([zip is required.])
  fi

  # Check the compiler version
  if test [ "$CXX" ]
  then
    CXX_VERSION=`$CXX --version | head -n 1 | cut -d " " -f 3` 
    if [[ "$CXX_VERSION" \< "3.3" ]]
    then
      AC_MSG_ERROR([g++ 3.3.x or higher required])
    fi
  fi

  # Determine libtool
  AC_PROG_LIBTOOL
  AC_PROG_RANLIB
  AC_PROG_MAKE_SET

  # Check if the 'pkg-config' binary exists
  AC_CHECK_TOOL(HAVE_PKG_CONFIG, pkg-config)
  if test [ ! "$HAVE_PKG_CONFIG" ]
  then 
    AC_MSG_ERROR([[cannot find pkg-config]])
  fi

fi

# Set current language to C++
AC_LANG(C++)

# Current path
CURRENT_PATH=`pwd`

# Check if their is a Perl binary
AC_CHECK_TOOL(HAVE_PERL, perl)

# Check the existence of stat64 (to handle file >2GB) in the libc
AC_CHECK_FUNCS([stat64])

# Generate the headers
AC_CONFIG_HEADERS([src/zimlib/src/config.h])

# used to display a warning message at end of configure
# if there are unmet dependencies which will be compiled.
MISSING_SELF_DEPS=0

function ErrorOrWarning {
	# parameters:
	# $1: condition on COMPILE_XX variable (check if it will be compiled)
	# $2: error message

	# if $1 is 1, we assume it will be compiled and just display warning
	if [[ $1 -eq 1 ]]
	then
		AC_MSG_WARN([[$2]])
		MISSING_SELF_DEPS=1
	# if not, it is supposed to be present so we send error
	else
		AC_MSG_ERROR([[$2]])
	fi
}

function yesno {
	if [[ $1 -eq 1 ]]
	then
		echo yes
	else
		echo no
	fi
}

function findstatic {
	found=0
	for f in $(echo $LIBS_ROOT|tr ":" "\n") ; do
		sf=`find $f -name $1 |head -1`
		if [[ -f "$sf" -a $found -eq 0 ]]
		then
			found=1
			echo $sf
		fi
	done
	if [[ $found -eq 0 ]]
	then
		echo "no"
	fi
}

####################################################
############ TARGET_ARCH
####################################################
# ARCH flags
#ARCH=`echo $MACHTYPE | cut -d- -f1`
ARCH=`uname -m`
AC_ARG_WITH(target-arch,
            AC_HELP_STRING([--with-target-arch=ARCH], [(OSX Only) Define the target architecture of the built (i386 or x86_64)]),
            XTARGET=${withval})
# only overwrite arch on OSX
if test [ $IS_OSX -eq 1 ] ; then
	AS_IF([test ! "${XTARGET}" = "i386" -a ! "${XTARGET}" = "x86_64"], [], [ARCH=${XTARGET}])
	CC="$CC -arch ${ARCH}"
	CXX="$CXX -arch ${ARCH}"
fi

if test [ "`uname -m | grep 64 | wc -l | awk '{ print $1}'`" = "0" ];
then
	IS_64B=0
else
	IS_64B=1
fi

if test [ "`uname -m | grep arm | wc -l | awk '{ print $1}'`" = "0" ];
then
	IS_ARM=0
else
	IS_ARM=1
fi

####################################################
############ DEPENDENCIES DEFAULT VALUES
####################################################

SELF="SELF"
DEP_PATH="${CURRENT_PATH}/src/dependencies"
LIBS_ROOT="${LD_LIBRARY_PATH}:${LIBRARY_PATH}:/usr/lib:/lib"
SERVER_BIN="${CURRENT_PATH}/src/server/kiwix-serve"
DEP_MIRROR="http://download.kiwix.org/dev"

COMPIL_DEPS=0
STATIC_BINS=0
STATIC_TMP="static_tmp"
SUGAR_TMP="sugar_tmp"
# list of .so to copy to xulrunner/ path
EMBED_LIBS=""

# sugar version
SUGAR_VERSION=`grep activity_version src/sugar/activity/activity.info | cut -d " " -f3`

SHARED_EXT="so"
if test [ $IS_OSX -eq 1 ] ; then
SHARED_EXT="dylib"
elif test [ $IS_WIN -eq 1 ] ; then
SHARED_EXT="dll"
fi

GECKO_SDK_PATH=""
COMPILE_GECKO_SDK=0
if test [ $IS_OSX -eq 1 ] ; then
COMPILED_GECKO_SDK_PATH="${DEP_PATH}/universal-sdk"
else
COMPILED_GECKO_SDK_PATH="${DEP_PATH}/xulrunner-sdk"
fi
# Special Flags for XPCOM components
XPCOM_CFLAGS="-fno-rtti -fPIC"
XPCOM_LDFLAGS="-Xcompiler -shared -Wl"

if test [ $IS_OSX -eq 1 ]
then
	XULRUNNER_RUNTIME_PATH="${DEP_PATH}/xr_target/xulrunner-11.0.en-US.mac/XUL.framework"
else
	XULRUNNER_RUNTIME_PATH="${DEP_PATH}/xulrunner"
fi

ZLIB_CFLAGS=""
ZLIB_LDFLAGS=" -lz"
ZLIB_STATIC_LDFLAGS=""
COMPILE_ZLIB=0
COMPILED_ZLIB_CFLAGS="-I${DEP_PATH}/zlib-1.2.3"
COMPILED_ZLIB_LDFLAGS="-L${DEP_PATH}/zlib-1.2.3/shared/lib  -lz"
COMPILED_ZLIB_FILES="${DEP_PATH}/zlib-1.2.3/shared/lib/libz.${SHARED_EXT}"
COMPILED_ZLIB_STATIC_LDFLAGS="${DEP_PATH}/zlib-1.2.3/static/lib/libz.a"

XAPIAN_CFLAGS=""
XAPIAN_LDFLAGS="-lxapian"
XAPIAN_STATIC_LDFLAGS=""
COMPILE_XAPIAN=0
COMPILED_XAPIAN_CFLAGS="-I${DEP_PATH}/xapian-core-1.2.3/build/include"
if test [ $IS_WIN -eq 1 ] ; then
    COMPILED_XAPIAN_LDFLAGS="${DEP_PATH}/xapian-core-1.2.3/win32/Release/libs/libunicode.lib"
else
	COMPILED_XAPIAN_LDFLAGS="-L${DEP_PATH}/xapian-core-1.2.3/build/lib -lxapian"
    COMPILED_XAPIAN_FILES="${DEP_PATH}/xapian-core-1.2.3/build/lib/libxapian.${SHARED_EXT}"
    COMPILED_XAPIAN_STATIC_LDFLAGS="${DEP_PATH}/xapian-core-1.2.3/build/lib/libxapian.a"
fi
XAPIAN_COMPACT=""
COMPILED_XAPIAN_COMPACT="${DEP_PATH}/xapian-core-1.2.3/build/bin/xapian-compact"

ICU_CFLAGS=""
ICU_LDFLAGS="-licui18n -licuuc -licudata" # replaced by icu-config"
ICU_STATIC_LDFLAGS=""
COMPILE_ICU=0
COMPILED_ICU_CFLAGS="-I${DEP_PATH}/icu/source/build/include"
if test [ $IS_WIN -eq 1 ] ; then
	COMPILED_ICU_LDFLAGS="${DEP_PATH}/icu/lib/icuio.lib ${DEP_PATH}/icu/lib/icudata.lib ${DEP_PATH}/icu/lib/icuuc.lib ${DEP_PATH}/icu/lib/icui18n.lib"
else
	COMPILED_ICU_LDFLAGS="-L${DEP_PATH}/icu/source/build/lib -licui18n -licuuc -licudata"
	COMPILED_ICU_STATIC_LDFLAGS="${DEP_PATH}/icu/source/build/lib/libicui18n.a ${DEP_PATH}/icu/source/build/lib/libicuuc.a ${DEP_PATH}/icu/source/build/lib/libicudata.a"
	COMPILED_ICU_CFLAGS="-I${DEP_PATH}/icu/source/build/include"
	COMPILED_ICU_FILES="${DEP_PATH}/icu/source/build/lib/libicui18n.${SHARED_EXT} ${DEP_PATH}/icu/source/build/lib/libicuuc.${SHARED_EXT} ${DEP_PATH}/icu/source/build/lib/libicudata.${SHARED_EXT}"
fi

# no win for sqlite as it is just a sub dependency of aria2
SQLITE_CFLAGS=""
SQLITE_LDFLAGS="-lsqlite3"
SQLITE_STATIC_LDFLAGS=""
COMPILE_SQLITE=0
COMPILED_SQLITE_LDFLAGS="-L${DEP_PATH}/sqlite-autoconf-3071000/build/lib -lsqlite3"
COMPILED_SQLITE_STATIC_LDFLAGS="${DEP_PATH}/sqlite-autoconf-3071000/build/lib/libsqlite3.a"
COMPILED_SQLITE_FILES="${DEP_PATH}/sqlite-autoconf-3071000/build/lib/libsqlite3.${SHARED_EXT}"

# used only for building kiwix-serve. Not available on windows.
MICROHTTPD_CFLAGS=""
MICROHTTPD_LDFLAGS="-lmicrohttpd"
MICROHTTPD_STATIC_LDFLAGS=""
COMPILE_MICROHTTPD=0
COMPILED_MICROHTTPD_CFLAGS="-I${DEP_PATH}/libmicrohttpd-0.9.19/build/include"
COMPILED_MICROHTTPD_LDFLAGS="-L${DEP_PATH}/libmicrohttpd-0.9.19/build/lib -lmicrohttpd"
COMPILED_MICROHTTPD_STATIC_LDFLAGS="${DEP_PATH}/libmicrohttpd-0.9.19/build/lib/libmicrohttpd.a"
COMPILED_MICROHTTPD_FILES="${DEP_PATH}/libmicrohttpd-0.9.19/build/lib/libmicrohttpd.${SHARED_EXT}"

LZMA_CFLAGS=""
LZMA_LDFLAGS=" -llzma"
LZMA_STATIC_LDFLAGS=""
COMPILE_LZMA=0
if test [ $IS_WIN -eq 1 ] ; then
	COMPILED_LZMA_LDFLAGS="${DEP_PATH}/xz/windows/liblzma.lib"
else
	COMPILED_LZMA_LDFLAGS="-L${DEP_PATH}/xz/build/lib  -llzma"
	COMPILED_LZMA_STATIC_LDFLAGS="${DEP_PATH}/xz/build/lib/liblzma.a"
    COMPILED_LZMA_FILES="${DEP_PATH}/xz/build/lib/liblzma.${SHARED_EXT}"
fi
COMPILED_LZMA_CFLAGS="-I${DEP_PATH}/xz/src/liblzma/api"


ARIA2_CFLAGS=""
ARIA2_LDFLAGS=""
COMPILE_ARIA2=0
if test [ $IS_OSX -eq 1 ] ; then
	COMPILED_ARIA2_FILES="${DEP_PATH}/aria2-1.14.2/usr/bin/aria2c"
else
	COMPILED_ARIA2_FILES="${DEP_PATH}/aria2c"
fi

CLUCENE_CFLAGS="-I/usr/lib -I/usr/lib64"
CLUCENE_LDFLAGS="-lclucene"
CLUCENE_STATIC_LDFLAGS=""
COMPILE_CLUCENE=0
COMPILED_CLUCENE_CFLAGS="-I${DEP_PATH}/clucene-core-0.9.21b/src"
COMPILED_CLUCENE_LDFLAGS="-L${DEP_PATH}/clucene-core-0.9.21b/build/lib -lclucene"
COMPILED_CLUCENE_STATIC_LDFLAGS="${DEP_PATH}/clucene-core-0.9.21b/build/lib/libclucene.a"
COMPILED_CLUCENE_FILES="${DEP_PATH}/clucene-core-0.9.21b/build/lib/libclucene.${SHARED_EXT}"

# uuid is used for binaries. only static.
UUID_CFLAGS=""
UUID_LDFLAGS=""
UUID_STATIC_LDFLAGS=""
COMPILE_UUID=0
COMPILED_UUID_CFLAGS="-I${DEP_PATH}/e2fsprogs-1.42/lib"
COMPILED_UUID_LDFLAGS=""
if test [ $IS_OSX -eq 1 ] ; then
	COMPILED_UUID_STATIC_LDFLAGS=""
	COMPILED_UUID_FILES=""
else
	COMPILED_UUID_STATIC_LDFLAGS="${DEP_PATH}/e2fsprogs-1.42/lib/libuuid.a"
	COMPILED_UUID_FILES="${DEP_PATH}/e2fsprogs-1.42/lib/libuuid.a"
fi

if test [ $IS_OSX -eq 1 ] ; then
	STATIC_GETTEXT_LDFLAGS="/opt/local/lib/libintl.a"
	STATIC_ICONV_LDFLAGS="/opt/local/lib/libiconv.a"
else
	STATIC_GETTEXT_LDFLAGS=""
	STATIC_ICONV_LDFLAGS=""
fi

WITH_COMPONENTS=1
WITH_CLUCENE=0
WITH_MANAGER=0
WITH_SERVER=1
WITH_LAUNCHER=1
WITH_INDEXER=0
WITH_INSTALLER=0
WITH_SEARCHER=0
WITH_READER=0

# INTERNAL COMPONENTS
CTPP2_CFLAGS="-I${CURRENT_PATH}/src/ctpp2/include"
CTPP2_LDFLAGS=""
PUGIXML_CFLAGS=""
PUGIXML_LDFLAGS=""
ZIMLIB_CFLAGS=""
ZIMLIB_LDFLAGS=""

# --enable-compileall
AC_ARG_ENABLE(compileall,
			  AC_HELP_STRING([--enable-compileall],
			  				 [mark every package for self compilation (default is no)]),
			  [], [enable_compileall=no])
AS_IF([test "x$enable_compileall" = "xyes"], [COMPIL_DEPS=1], [COMPIL_DEPS=0])

if test [ $COMPIL_DEPS -eq 1 ]
then
	COMPILE_GECKO_SDK=1
	COMPILE_ZLIB=1
	COMPILE_XAPIAN=1
	COMPILE_ICU=1
	COMPILE_SQLITE=1
	COMPILE_MICROHTTPD=1
	COMPILE_LZMA=1
	COMPILE_ARIA2=1
	COMPILE_CLUCENE=1
	COMPILE_UUID=1
	WITH_LAUNCHER=1
	WITH_SERVER=1
else
	COMPIL_DEPS=0
fi

####################################################
############ Optional packages
####################################################

# enable this to compile binaries (CLI) staticaly
AC_ARG_ENABLE(staticbins,
			  AC_HELP_STRING([--enable-staticbins],
			  				 [compile CLI binaries staticaly (default is no)]),
			  [], [enable_staticbins=no])
AS_IF([test "x$enable_staticbins" = "xyes"], [STATIC_BINS=1], [STATIC_BINS=0])

# manager is a command line to to build library
AC_ARG_ENABLE(manager,
			  AC_HELP_STRING([--enable-manager],
			  				 [compile manager (default is no)]),
			  [], [enable_manager=no])
AS_IF([test "x$enable_manager" = "xyes"], [WITH_MANAGER=1], [WITH_MANAGER=0])

# HTTP server
AC_ARG_ENABLE(server,
			  AC_HELP_STRING([--enable-server],
			  				 [compile HTTP server (default is yes)]),
			  [], [enable_server=yes])
AS_IF([test "x$enable_server" = "xyes"], [WITH_SERVER=1], [WITH_SERVER=0])

# static launcher
AC_ARG_ENABLE(launcher,
			  AC_HELP_STRING([--enable-launcher],
			  				 [compile launcher for static (default is yes)]),
			  [], [enable_launcher=yes])
AS_IF([test "x$enable_launcher" = "xyes"], [WITH_LAUNCHER=1], [WITH_LAUNCHER=0])

# zim indexer is a command line tool to create xapian/lucene index
AC_ARG_ENABLE(indexer,
			  AC_HELP_STRING([--enable-indexer],
			  				 [compile indexer (default is no)]),
			  [], [enable_indexer=no])
AS_IF([test "x$enable_indexer" = "xyes"], [WITH_INDEXER=1], [WITH_INDEXER=0])

# installer is GUI on windows or command line on linux
AC_ARG_ENABLE(installer,
			  AC_HELP_STRING([--enable-installer],
			  				 [compile installer (default is no)]),
			  [], [enable_installer=no])
AS_IF([test "x$enable_installer" = "xyes"], [WITH_INSTALLER=1], [WITH_INSTALLER=0])

# searcher is a command line binary to test search engine
AC_ARG_ENABLE(searcher,
			  AC_HELP_STRING([--enable-searcher],
			  				 [compile searcher (default is no)]),
			  [], [enable_searcher=no])
AS_IF([test "x$enable_searcher" = "xyes"], [WITH_SEARCHER=1], [WITH_SEARCHER=0])

# reader is a command line tool
AC_ARG_ENABLE(reader,
			  AC_HELP_STRING([--enable-reader],
			  				 [compile reader (default is no)]),
			  [], [enable_reader=no])
AS_IF([test "x$enable_reader" = "xyes"], [WITH_READER=1], [WITH_READER=0])

# HTTP server
AC_ARG_ENABLE(components,
			  AC_HELP_STRING([--enable-components],
			  				 [compile gecko components (default is yes)]),
			  [], [enable_components=yes])
AS_IF([test "x$enable_components" = "xyes"], [WITH_COMPONENTS=1], [WITH_COMPONENTS=0])

# all enables all optional tools
AC_ARG_ENABLE(all,
			  AC_HELP_STRING([--enable-all],
			  				 [compile all optionnal tools (default is no)]),
			  [], [enable_all=no])
AS_IF([test "x$enable_all" = "xyes"], [WITH_LAUNCHER=1;WITH_INDEXER=1;WITH_INSTALLER=1;WITH_SEARCHER=1;WITH_READER=1;WITH_MANAGER=1;WITH_SERVER=1;WITH_COMPONENTS=1], [])

# --enable-oldicu
AC_ARG_ENABLE(oldicu,
			  AC_HELP_STRING([--enable-oldicu],
			  				 [download and use ICU 4.4 of latest (default is no)]),
			  [], [enable_oldicu=no])
AS_IF([test "x$enable_oldicu" = "xyes"], [IS_OLD_ICU=1], [IS_OLD_ICU=0])

# extra includes allow to specify extra -I paths
AC_ARG_WITH(extra-includes,
            [  --with-extra-includes=DIR:DIR	PATH like list of folder to add to include lookup],
            export CPATH="${withval}")

AC_ARG_WITH([debug],
			AC_HELP_STRING([--with-debug],
						   [add debug symbols]),
		    CFLAGS="${CFLAGS} -g "; CXXFLAGS="${CXXFLAGS} -g ")

if test [ $WITH_MANAGER -eq 1 -o $WITH_SERVER -eq 1 -o $WITH_LAUNCHER -eq 1 -o $WITH_INDEXER -eq 1 -o $WITH_INSTALLER -eq 1 -o $WITH_SEARCHER -eq 1 -o $WITH_READER -eq 1 ] ; then
	REQUIRE_STATIC=1
else
	REQUIRE_STATIC=0
fi

####################################################
############ GECKO SDK
####################################################

# --enable-old-gecko
AC_ARG_ENABLE(oldgecko,
			  AC_HELP_STRING([--enable-oldgecko],
			  				 [download and use Gecko SDK 1.9.2 instead of latest (default is no)]),
			  [], [enable_oldgecko=no])
AS_IF([test "x$enable_oldgecko" = "xyes"], [IS_OLD_GECKO=1], [IS_OLD_GECKO=0])


AC_ARG_WITH(gecko-sdk,
            AC_HELP_STRING([--with-gecko-sdk=DIR], [Gecko SDK path]),
            GECKO_SDK_PATH=`cd ${withval} && pwd || $GECKO_SDK_PATH`)

# try to find installed gecko-sdk. default to SELF
if test [ "$GECKO_SDK_PATH" = "" ]
then
    GECKO_SDK_PATH=`pkg-config --variable=sdkdir libxul`
    if test [ ! "$GECKO_SDK_PATH" ]
    then
        GECKO_SDK_PATH=$SELF
    fi
fi

if test [ "$GECKO_SDK_PATH" = "$SELF" -o $COMPILE_GECKO_SDK -eq 1 ]
then
    COMPILE_GECKO_SDK=1
    GECKO_SDK_PATH=$COMPILED_GECKO_SDK_PATH
fi

if test [ $IS_OSX -eq 1 ] ; then
	GECKO_INCLUDE_PATH="${GECKO_SDK_PATH}/x86_64/include"
	GECKO_SDK_INCLUDE="${GECKO_SDK_PATH}/x86_64/sdk/include"
	GECKO_SDK_LIB="${GECKO_SDK_PATH}/${ARCH}/lib"
	GECKO_IDL_PATH=${GECKO_SDK_PATH}/x86_64/idl
	XPIDL_PATH=$GECKO_SDK_PATH/x86_64/sdk/bin
else
	GECKO_INCLUDE_PATH="${GECKO_SDK_PATH}/include"
	GECKO_SDK_INCLUDE="${GECKO_SDK_PATH}/sdk/include"
	GECKO_SDK_LIB="${GECKO_SDK_PATH}/sdk/lib"
	GECKO_IDL_PATH=${GECKO_SDK_PATH}/idl
	XPIDL_PATH=$GECKO_SDK_PATH/sdk/bin
fi

# Gecko version
GECKO_VERSION_FALLBACK=0
GECKO_VERSION=`grep MOZILLA_VERSION_U ${GECKO_INCLUDE_PATH}/mozilla-config.h | cut -d " " -f 3 | cut -d "." -f 1`
if [[ "$GECKO_VERSION" = "" ]]
then
	GECKO_VERSION=$GECKO_VERSION_FALLBACK
fi
let GECKO_VERSION=GECKO_VERSION
if [[ $GECKO_VERSION -gt 1 ]]
then
	if test [ $IS_OSX -eq 1 ] ; then
	CXXFLAGS="${CXXFLAGS} -fexceptions -DMOZ_CPP_EXCEPTIONS -DMOZ_NO_MOZALLOC"
	else
	CXXFLAGS="${CXXFLAGS} -std=gnu++0x -fexceptions -DMOZ_CPP_EXCEPTIONS -DMOZ_NO_MOZALLOC"
	fi
	if [[ $GECKO_VERSION -lt 10 ]]
	then
		GECKO_OLD_BOOL_TYPE=1
	fi
fi
AC_MSG_RESULT(checking for Gecko version... ${GECKO_VERSION})
AM_CONDITIONAL([GECKO_OLD_BOOL_TYPE], [test "$GECKO_OLD_BOOL_TYPE"])

LIBXUL_CFLAGS="-I${GECKO_SDK_INCLUDE} -I${GECKO_INCLUDE_PATH} -fshort-wchar"
# replaced -lxpcomglue_s with libxpcomglue_s_nomozalloc.a to prevent
# undefined symbols. supposed to be compatible wth 1.9.
if test [ $IS_OSX -eq 1 ] ; then
LIBXUL_LDFLAGS="-L${GECKO_SDK_LIB} -lxpcom -lplds4 -lplc4 -lnspr4 -lpthread -ldl ${GECKO_SDK_LIB}/libxpcomglue_s_nomozalloc.a  ${GECKO_SDK_LIB}/XUL"
else 
LIBXUL_LDFLAGS="-L${GECKO_SDK_LIB} -lxul -lxpcom -lplds4 -lplc4 -lnspr4 -lpthread -ldl -lxpcomglue_s"
fi

if test [ ! -f "$GECKO_IDL_PATH/nsISupports.idl" ]
then
    ErrorOrWarning "$COMPILE_GECKO_SDK" "unable to find nsISupports.idl"
fi

AC_CHECK_TOOL(HAVE_XPIDL, "xpidl", [], $XPIDL_PATH)
if test [ "$HAVE_XPIDL" ]
then
    AC_PATH_PROG([XPIDL], "xpidl", [],  $XPIDL_PATH)
else
    # SDK 0.9 and further do not have an xpidl binary anymore
    # This is replace by the python script typelib.py and header.py
    AC_PATH_PROG([PYTHON], "python")             
    if test [ ! "$PYTHON" ]
    then
             AC_MSG_ERROR([[cannot find python]])
    fi

    if test [ ! -f "$XPIDL_PATH/header.py" -o ! -f "$XPIDL_PATH/typelib.py" ]
    then
        ErrorOrWarning "$COMPILE_GECKO_SDK" "unable to find neither the xpidl binary nor the typelib.py and header.py scripts"
    fi

    HEADER_PY="$PYTHON $XPIDL_PATH/header.py"
    TYPELIB_PY="$PYTHON $XPIDL_PATH/typelib.py"
fi

####################################################
############ ZLIB
####################################################

# if --with-x, add path to LIBRARY_PATH
AC_ARG_WITH(z,
			AC_HELP_STRING([--with-z=DIR], [alternate location for zlib]),
			  	export LIBRARY_PATH="${withval}:${LIBRARY_PATH}";ZLIB_PATH=${withval})

# if --with-static-x, set path as X_ARCHIVE
AC_ARG_WITH(static-z,
            AC_HELP_STRING([--with-static-z=DIR/libx.a],
            			   [Path to static archive]),
            ZLIB_ARCHIVE=${withval})

# compilation required
if test [ $COMPILE_ZLIB -eq 1 -o "$ZLIB_PATH" == "$SELF" -o "$ZLIB_ARCHIVE" == "$SELF"] ; then
	COMPILE_ZLIB=1
	ZLIB_CFLAGS=$COMPILED_ZLIB_CFLAGS
    ZLIB_LDFLAGS=$COMPILED_ZLIB_LDFLAGS
	ZLIB_FILES=$COMPILED_ZLIB_FILES
	ZLIB_STATIC_LDFLAGS=$COMPILED_ZLIB_STATIC_LDFLAGS
else
	# look for shared library.
	AC_CHECK_HEADER([zlib.h],, [AC_MSG_ERROR([[cannot find zlib header]])])
	AC_CHECK_LIB([z], [zlibVersion],, [AC_MSG_ERROR([[cannot find zlib]]);COMPILE_ZLIB=1])
	ZLIB_FILES=`findstatic "libz.${SHARED_EXT}"`

	# if static is required
	if test [ $REQUIRE_STATIC -eq 1 ] ; then
		AC_CHECK_FILE($ZLIB_ARCHIVE, [ZLIB_ARCHIVE_FOUND=1], [ZLIB_ARCHIVE_FOUND=0])
		AUTO_ZLIB_ARCHIVE=`findstatic "libz.a"`

		if test [ $ZLIB_ARCHIVE_FOUND -eq 0 -a "$AUTO_ZLIB_ARCHIVE" == "no" ] ; then
			# can't stat files. force compile
  			COMPILE_ZLIB=1
			ZLIB_CFLAGS=$COMPILED_ZLIB_CFLAGS
		    ZLIB_LDFLAGS=$COMPILED_ZLIB_LDFLAGS
			ZLIB_FILES=$COMPILED_ZLIB_FILES
			ZLIB_STATIC_LDFLAGS=$COMPILED_ZLIB_STATIC_LDFLAGS
  		elif test [ $ZLIB_ARCHIVE_FOUND -eq 1 ] ; then
			# can stat suplied file.
  			ZLIB_STATIC_LDFLAGS="${ZLIB_ARCHIVE}"
  		else
  			# can stat auto file
  			ZLIB_STATIC_LDFLAGS="${AUTO_ZLIB_ARCHIVE}"
  		fi
  	fi
fi

####################################################
############ XAPIAN
####################################################

# if --with-x, add path to LIBRARY_PATH
AC_ARG_WITH(xapian,
			AC_HELP_STRING([--with-xapian=DIR], [alternate location for xapian-config]),
			  	export LIBRARY_PATH="${withval}:${LIBRARY_PATH}";XAPIAN_PATH=${withval})

# if --with-static-x, set path as X_ARCHIVE
AC_ARG_WITH(static-xapian,
            AC_HELP_STRING([--with-static-xapian=DIR/libx.a],
            			   [Path to static archive]),
            XAPIAN_ARCHIVE=${withval})

# compilation required
if test [ $COMPILE_XAPIAN -eq 1 -o "$XAPIAN_PATH" == "$SELF" -o "$XAPIAN_ARCHIVE" == "$SELF"] ; then
	COMPILE_XAPIAN=1
	XAPIAN_CFLAGS=$COMPILED_XAPIAN_CFLAGS
    XAPIAN_LDFLAGS=$COMPILED_XAPIAN_LDFLAGS
	XAPIAN_FILES=$COMPILED_XAPIAN_FILES
	XAPIAN_STATIC_LDFLAGS=$COMPILED_XAPIAN_STATIC_LDFLAGS
	XAPIAN_COMPACT=$COMPILED_XAPIAN_COMPACT
else
	# look for shared library.
	AC_CHECK_TOOL(HAVE_XAPIAN_CONFIG, xapian-config,, "${XAPIAN_PATH}:${PATH}")
	if test [ ! "$HAVE_XAPIAN_CONFIG" ]
	then 
	     AC_MSG_ERROR([[cannot find xapian-config]])
	else
		OLDPATH=$PATH
		PATH="${XAPIAN_PATH}:${PATH}"
	    XAPIAN_CFLAGS=`xapian-config --cxxflags`;
	    XAPIAN_LDFLAGS=`xapian-config --ltlibs`;
	    XAPIAN_FILES=`findstatic "libxapian.${SHARED_EXT}"`
	    PATH=$OLDPATH
	fi

	AC_CHECK_TOOL([XAPIAN_COMPACT],[xapian-compact],[])
	XAPIAN_COMPACT=`which $XAPIAN_COMPACT`
	if test [ ! "$XAPIAN_COMPACT" ]
	then 
	     AC_MSG_ERROR([[cannot find xapian-compact]])
	fi

	# if static is required
	if test [ $REQUIRE_STATIC -eq 1 ] ; then
		AC_CHECK_FILE($XAPIAN_ARCHIVE, [XAPIAN_ARCHIVE_FOUND=1], [XAPIAN_ARCHIVE_FOUND=0])
		AUTO_XAPIAN_ARCHIVE=`findstatic "libxapian.a"`

		if test [ $XAPIAN_ARCHIVE_FOUND -eq 0 -a "$AUTO_XAPIAN_ARCHIVE" == "no" ] ; then
			# can't stat files. force compile
  			COMPILE_XAPIAN=1
			XAPIAN_CFLAGS=$COMPILED_XAPIAN_CFLAGS
		    XAPIAN_LDFLAGS=$COMPILED_XAPIAN_LDFLAGS
			XAPIAN_FILES=$COMPILED_XAPIAN_FILES
			XAPIAN_STATIC_LDFLAGS=$COMPILED_XAPIAN_STATIC_LDFLAGS
			XAPIAN_COMPACT=$COMPILED_XAPIAN_COMPACT
  		elif test [ $XAPIAN_ARCHIVE_FOUND -eq 1 ] ; then
			# can stat suplied file.
  			XAPIAN_STATIC_LDFLAGS="${XAPIAN_ARCHIVE}"
  		else
  			# can stat auto file
  			XAPIAN_STATIC_LDFLAGS="${AUTO_XAPIAN_ARCHIVE}"
  		fi
  	fi
fi

####################################################
############ ICU
####################################################

# if --with-x, add path to LIBRARY_PATH
AC_ARG_WITH(icu,
			AC_HELP_STRING([--with-icu=DIR], [alternate location for icu-config]),
			  	export LIBRARY_PATH="${withval}:${LIBRARY_PATH}";ICU_PATH=${withval})

# if --with-static-x, set path as X_ARCHIVE
AC_ARG_WITH(static-z,
            AC_HELP_STRING([--with-static-icu=DIR],
            			   [Path to static archives folder]),
            ICU_ARCHIVE=${withval})

# compilation required
if test [ $COMPILE_ICU -eq 1 -o "$ICU_PATH" == "$SELF" -o "$ICU_ARCHIVE" == "$SELF"] ; then
	COMPILE_ICU=1
	ICU_CFLAGS=$COMPILED_ICU_CFLAGS
    ICU_LDFLAGS=$COMPILED_ICU_LDFLAGS
	ICU_FILES=$COMPILED_ICU_FILES
	ICU_STATIC_LDFLAGS=$COMPILED_ICU_STATIC_LDFLAGS
else
	# look for shared library.
	# AC_CHECK_HEADER([zlib.h],, [AC_MSG_ERROR([[cannot find zlib header]])])
	# AC_CHECK_LIB([z], [zlibVersion],, [AC_MSG_ERROR([[cannot find zlib]]);COMPILE_ICU=1])
	# ICU_FILES=`findstatic "libicuuc.${SHARED_EXT}"`

	AC_CHECK_TOOL(HAVE_ICU_CONFIG, icu-config,, "${ICU_PATH}:${PATH}")
	if test [ ! "$HAVE_ICU_CONFIG" ]
	then 
	     AC_MSG_ERROR([[cannot find icu-config]])
	else
		OLDPATH=$PATH
		PATH="${ICU_PATH}:${PATH}"
	    ICU_CFLAGS=`icu-config --cxxflags`;
	    ICU_LDFLAGS=`icu-config --ldflags`;
	    ICU_VER=`icu-config --version`;
	    ICU_FILES="`findstatic "libicuuc.${SHARED_EXT}"` `findstatic "libicudata.${SHARED_EXT}"` `findstatic "libicui18n.${SHARED_EXT}"`"
	    PATH=$OLDPATH
	    if [[ $ICU_VER \< "4.2" ]]
		then 
		     AC_MSG_ERROR([[You need a version of libicu >= 4.2]])
		fi
	fi

	# if static is required
	if test [ $REQUIRE_STATIC -eq 1 ] ; then
		AC_CHECK_FILE("$ICU_ARCHIVE/libicuuc.a", [ICU_ARCHIVE_FOUND=1], [ICU_ARCHIVE_FOUND=0])
		AUTO_ICU_ARCHIVE=`findstatic "libicuuc.a"`

		if test [ $ICU_ARCHIVE_FOUND -eq 0 -a "$AUTO_ICU_ARCHIVE" == "no" ] ; then
			# can't stat files. force compile
  			COMPILE_ICU=1
			ICU_CFLAGS=$COMPILED_ICU_CFLAGS
		    ICU_LDFLAGS=$COMPILED_ICU_LDFLAGS
			ICU_FILES=$COMPILED_ICU_FILES
			ICU_STATIC_LDFLAGS=$COMPILED_ICU_STATIC_LDFLAGS
  		elif test [ $ICU_ARCHIVE_FOUND -eq 1 ] ; then
			# can stat suplied file.
  			ICU_STATIC_LDFLAGS="$ICU_ARCHIVE/libicuuc.a $ICU_ARCHIVE/libicudata.a $ICU_ARCHIVE/libicui18n.a"
  		else
  			# can stat auto file
  			ICU_STATIC_LDFLAGS="`findstatic 'libicuuc.a'` `findstatic 'libicudata.a'` `findstatic 'libicui18n.a'`"
  		fi
  	fi
fi

####################################################
############ SQLITE
####################################################

# if --with-x, add path to LIBRARY_PATH
AC_ARG_WITH(sqlite,
			AC_HELP_STRING([--with-sqlite=DIR], [alternate location for sqlite]),
			  	export LIBRARY_PATH="${withval}:${LIBRARY_PATH}";SQLITE_PATH=${withval})

# if --with-static-x, set path as X_ARCHIVE
AC_ARG_WITH(static-sqlite,
            AC_HELP_STRING([--with-static-sqlite=DIR/libx.a],
            			   [Path to static archive]),
            SQLITE_ARCHIVE=${withval})

# compilation required
if test [ $COMPILE_SQLITE -eq 1 -o "$SQLITE_PATH" == "$SELF" -o "$SQLITE_ARCHIVE" == "$SELF"] ; then
	COMPILE_SQLITE=1
	SQLITE_CFLAGS=$COMPILED_SQLITE_CFLAGS
    SQLITE_LDFLAGS=$COMPILED_SQLITE_LDFLAGS
	SQLITE_FILES=$COMPILED_SQLITE_FILES
	SQLITE_STATIC_LDFLAGS=$COMPILED_SQLITE_STATIC_LDFLAGS
else
	# look for shared library.
	AC_CHECK_HEADER([sqlite3.h],, [AC_MSG_ERROR([[cannot find sqlite3 header]])])
 	AC_CHECK_LIB([sqlite3], [sqlite3_libversion],, [AC_MSG_ERROR([[cannot find sqlite3]])])
	SQLITE_FILES=`findstatic "libsqlite3.${SHARED_EXT}"`

	# if static is required
	if test [ $REQUIRE_STATIC -eq 1 ] ; then
		AC_CHECK_FILE($SQLITE_ARCHIVE, [SQLITE_ARCHIVE_FOUND=1], [SQLITE_ARCHIVE_FOUND=0])
		AUTO_SQLITE_ARCHIVE=`findstatic "libsqlite3.a"`

		if test [ $SQLITE_ARCHIVE_FOUND -eq 0 -a "$AUTO_SQLITE_ARCHIVE" == "no" ] ; then
			# can't stat files. force compile
  			COMPILE_SQLITE=1
			SQLITE_CFLAGS=$COMPILED_SQLITE_CFLAGS
		    SQLITE_LDFLAGS=$COMPILED_SQLITE_LDFLAGS
			SQLITE_FILES=$COMPILED_SQLITE_FILES
			SQLITE_STATIC_LDFLAGS=$COMPILED_SQLITE_STATIC_LDFLAGS
  		elif test [ $SQLITE_ARCHIVE_FOUND -eq 1 ] ; then
			# can stat suplied file.
  			SQLITE_STATIC_LDFLAGS="${SQLITE_ARCHIVE}"
  		else
  			# can stat auto file
  			SQLITE_STATIC_LDFLAGS="${AUTO_SQLITE_ARCHIVE}"
  		fi
  	fi
fi

####################################################
############ MICROHTTPD
####################################################

# if --with-x, add path to LIBRARY_PATH
AC_ARG_WITH(microhttpd,
			AC_HELP_STRING([--with-microhttpd=DIR], [alternate location for microhttpd]),
			  	export LIBRARY_PATH="${withval}:${LIBRARY_PATH}";MICROHTTPD_PATH=${withval})

# if --with-static-x, set path as X_ARCHIVE
AC_ARG_WITH(static-microhttpd,
            AC_HELP_STRING([--with-static-microhttpd=DIR/libx.a],
            			   [Path to static archive]),
            MICROHTTPD_ARCHIVE=${withval})

# compilation required
if test [ $COMPILE_MICROHTTPD -eq 1 -o "$MICROHTTPD_PATH" == "$SELF" -o "$MICROHTTPD_ARCHIVE" == "$SELF"] ; then
	COMPILE_MICROHTTPD=1
	MICROHTTPD_CFLAGS=$COMPILED_MICROHTTPD_CFLAGS
    MICROHTTPD_LDFLAGS=$COMPILED_MICROHTTPD_LDFLAGS
	MICROHTTPD_FILES=$COMPILED_MICROHTTPD_FILES
	MICROHTTPD_STATIC_LDFLAGS=$COMPILED_MICROHTTPD_STATIC_LDFLAGS
else
	# look for shared library.
	AC_CHECK_HEADER([microhttpd.h],, [AC_MSG_ERROR([[cannot find microhttpd header]])])
	AC_CHECK_LIB([microhttpd], [MHD_start_daemon],, [AC_MSG_ERROR([[cannot find microhttpd]])])

	# Check the libmicrohttpd version
	`pkg-config --atleast-version="0.4.0" libmicrohttpd`
	MICROHTTPD_VERSION_OK=$?
	if test [ ! $MICROHTTPD_VERSION_OK -eq 0 ]
	then
		AC_MSG_ERROR([[The libmicrohttpd version must be 0.4.0 or higher.]])
	fi
	MICROHTTPD_FILES=`findstatic "libmicrohttpd.${SHARED_EXT}"`

	# if static is required
	if test [ $REQUIRE_STATIC -eq 1 ] ; then
		AC_CHECK_FILE($MICROHTTPD_ARCHIVE, [MICROHTTPD_ARCHIVE_FOUND=1], [MICROHTTPD_ARCHIVE_FOUND=0])
		AUTO_MICROHTTPD_ARCHIVE=`findstatic "libmicrohttpd.a"`

		if test [ $MICROHTTPD_ARCHIVE_FOUND -eq 0 -a "$AUTO_MICROHTTPD_ARCHIVE" == "no" ] ; then
			# can't stat files. force compile
  			COMPILE_MICROHTTPD=1
			MICROHTTPD_CFLAGS=$COMPILED_MICROHTTPD_CFLAGS
		    MICROHTTPD_LDFLAGS=$COMPILED_MICROHTTPD_LDFLAGS
			MICROHTTPD_FILES=$COMPILED_MICROHTTPD_FILES
			MICROHTTPD_STATIC_LDFLAGS=$COMPILED_MICROHTTPD_STATIC_LDFLAGS
  		elif test [ $MICROHTTPD_ARCHIVE_FOUND -eq 1 ] ; then
			# can stat suplied file.
  			MICROHTTPD_STATIC_LDFLAGS="${MICROHTTPD_ARCHIVE}"
  		else
  			# can stat auto file
  			MICROHTTPD_STATIC_LDFLAGS="${AUTO_MICROHTTPD_ARCHIVE}"
  		fi
  	fi
fi

####################################################
############ LZMA
####################################################

# if --with-x, add path to LIBRARY_PATH
AC_ARG_WITH(lzma,
			AC_HELP_STRING([--with-lzma=DIR], [alternate location for lzma]),
			  	export LIBRARY_PATH="${withval}:${LIBRARY_PATH}";LZMA_PATH=${withval})

# if --with-static-x, set path as X_ARCHIVE
AC_ARG_WITH(static-lzma,
            AC_HELP_STRING([--with-static-lzma=DIR/libx.a],
            			   [Path to static archive]),
            LZMA_ARCHIVE=${withval})

# compilation required
if test [ $COMPILE_LZMA -eq 1 -o "$LZMA_PATH" == "$SELF" -o "$LZMA_ARCHIVE" == "$SELF"] ; then
	COMPILE_LZMA=1
	LZMA_CFLAGS=$COMPILED_LZMA_CFLAGS
    LZMA_LDFLAGS=$COMPILED_LZMA_LDFLAGS
	LZMA_FILES=$COMPILED_LZMA_FILES
	LZMA_STATIC_LDFLAGS=$COMPILED_LZMA_STATIC_LDFLAGS
else
	# look for shared library.
	AC_CHECK_HEADER([lzma.h],, [AC_MSG_ERROR([[cannot find lzma header]])])
	AC_CHECK_LIB([lzma], [MHD_start_daemon],, [AC_MSG_ERROR([[cannot find lzma]])])

	# Check the liblzma version
	`pkg-config --atleast-version="0.4.0" liblzma`
	LZMA_VERSION_OK=$?
	if test [ ! $LZMA_VERSION_OK -eq 0 ]
	then
		AC_MSG_ERROR([[The liblzma version must be 0.4.0 or higher.]])
	fi
	LZMA_FILES=`findstatic "liblzma.${SHARED_EXT}"`

	# if static is required
	if test [ $REQUIRE_STATIC -eq 1 ] ; then
		AC_CHECK_FILE($LZMA_ARCHIVE, [LZMA_ARCHIVE_FOUND=1], [LZMA_ARCHIVE_FOUND=0])
		AUTO_LZMA_ARCHIVE=`findstatic "liblzma.a"`

		if test [ $LZMA_ARCHIVE_FOUND -eq 0 -a "$AUTO_LZMA_ARCHIVE" == "no" ] ; then
			# can't stat files. force compile
  			COMPILE_LZMA=1
			LZMA_CFLAGS=$COMPILED_LZMA_CFLAGS
		    LZMA_LDFLAGS=$COMPILED_LZMA_LDFLAGS
			LZMA_FILES=$COMPILED_LZMA_FILES
			LZMA_STATIC_LDFLAGS=$COMPILED_LZMA_STATIC_LDFLAGS
  		elif test [ $LZMA_ARCHIVE_FOUND -eq 1 ] ; then
			# can stat suplied file.
  			LZMA_STATIC_LDFLAGS="${LZMA_ARCHIVE}"
  		else
  			# can stat auto file
  			LZMA_STATIC_LDFLAGS="${AUTO_LZMA_ARCHIVE}"
  		fi
  	fi
fi

####################################################
############ ARIA2
####################################################

# if --with-x, add path to LIBRARY_PATH
# AC_ARG_WITH(aria2,
# 			AC_HELP_STRING([--with-aria2=DIR],
# 						   [alternate location for aria2]),
# 			  	export LIBRARY_PATH="${withval}:${LIBRARY_PATH}"; ARIA2_CONFIG_PATH=$withval)

# if --with-static-x, set path as X_ARCHIVE
AC_ARG_WITH(aria2,
            AC_HELP_STRING([--with-aria2=DIR/aria2c],
            			   [Path to aria2c binary]),
            ARIA2_ARCHIVE=${withval})

# if no static argument, check for lib on system (which may contain the --with-x= path)
if test [ "$ARIA2_ARCHIVE" == "" -a $COMPILE_ARIA2 -eq 0 ]
then
	# fail if none found.
	AC_CHECK_TOOL([ARIA2_BIN],[aria2c],[])
	if [[ "$ARIA2_BIN" = "" ]];
	then
		AC_MSG_ERROR([aria2c is required.])
    fi
    # ARIA2_LDFLAGS=`which aria2c`
    ARIA2_BIN=`which aria2c`
# static argument supplied
else
	# if argument is SELF, add to compile queue
	if test [ "$ARIA2_ARCHIVE" == "$SELF" -o $COMPILE_ARIA2 -eq 1 ]
	then
	    COMPILE_ARIA2=1
	    # ARIA2_LDFLAGS=$COMPILED_ARIA2_LDFLAGS
	    ARIA2_FILES=$COMPILED_ARIA2_FILES
	# if path provided, test file existence (and fail)
	else
		# ARIA2_LDFLAGS=`readlink -f $ARIA2_ARCHIVE`
		AC_CHECK_FILE($ARIA2_ARCHIVE,,[AC_MSG_ERROR([[cannot stat aria2 archive at $ARIA2_ARCHIVE]])])
		ARIA2_BIN=$ARIA2_ARCHIVE
	fi
fi
if test [ "$ARIA2_BIN" ];
then
	ARIA2C_VERSION=`${ARIA2_BIN} -v | grep "aria2 version" | cut -d' ' -f3`
	ARIA2C_VERSION_CHK=`${ARIA2_BIN} -v | grep "aria2 version" | cut -d' ' -f3 | cut -d. -f-2 | sed "s/\.//"`
	AC_MSG_RESULT(checking for aria2c version... ${ARIA2C_VERSION})
	if [[ ${ARIA2C_VERSION_CHK} -lt 114 ]]
	then
		AC_MSG_ERROR([aria2c is too old, you need version 1.14 or newer.])
	fi
	ARIA2_FILES=$ARIA2_BIN
fi

####################################################
############ CLUCENE
####################################################

# if --with-x, add path to LIBRARY_PATH
AC_ARG_WITH(clucene,
			AC_HELP_STRING([--with-clucene=DIR], [alternate location for clucene]),
			  	export LIBRARY_PATH="${withval}:${LIBRARY_PATH}";CLUCENE_PATH=${withval})

# if --with-static-x, set path as X_ARCHIVE
AC_ARG_WITH(static-clucene,
            AC_HELP_STRING([--with-static-clucene=DIR/libx.a],
            			   [Path to static archive]),
            CLUCENE_ARCHIVE=${withval})

# compilation required
if test [ $COMPILE_CLUCENE -eq 1 -o "$CLUCENE_PATH" == "$SELF" -o "$CLUCENE_ARCHIVE" == "$SELF"] ; then
	COMPILE_CLUCENE=1
	CLUCENE_CFLAGS=$COMPILED_CLUCENE_CFLAGS
    CLUCENE_LDFLAGS=$COMPILED_CLUCENE_LDFLAGS
	CLUCENE_FILES=$COMPILED_CLUCENE_FILES
	CLUCENE_STATIC_LDFLAGS=$COMPILED_CLUCENE_STATIC_LDFLAGS
else
	# look for shared library.
	AC_CHECK_HEADER([CLucene/CLConfig.h],, [AC_MSG_ERROR([[cannot find clucene header]])])
	AC_CHECK_LIB([clucene], [open], [CLUCENE_LDFLAGS="-lclucene"],
	[
		AC_CHECK_LIB([clucene-core], [open],, [AC_MSG_ERROR([[cannot find clucene-core]])])
		AC_CHECK_LIB([clucene-shared], [open],, [AC_MSG_ERROR([[cannot find clucene-shared]])])
		CLUCENE_LDFLAGS="-lclucene-core -lclucene-shared"
	])


	AC_DEFINE(_SUPPRESS_MAKE_BASED_CONFIG, [TRUE], [CLUCENE VERSION SWITCH])
	CLUCENE_FILES=`findstatic "libclucene.${SHARED_EXT}"`

	# if static is required
	if test [ $REQUIRE_STATIC -eq 1 ] ; then
		AC_CHECK_FILE($CLUCENE_ARCHIVE, [CLUCENE_ARCHIVE_FOUND=1], [CLUCENE_ARCHIVE_FOUND=0])
		AUTO_CLUCENE_ARCHIVE=`findstatic "libclucene.a"`

		if test [ $CLUCENE_ARCHIVE_FOUND -eq 0 -a "$AUTO_CLUCENE_ARCHIVE" == "no" ] ; then
			# can't stat files. force compile
  			COMPILE_CLUCENE=1
			CLUCENE_CFLAGS=$COMPILED_CLUCENE_CFLAGS
		    CLUCENE_LDFLAGS=$COMPILED_CLUCENE_LDFLAGS
			CLUCENE_FILES=$COMPILED_CLUCENE_FILES
			CLUCENE_STATIC_LDFLAGS=$COMPILED_CLUCENE_STATIC_LDFLAGS
  		elif test [ $CLUCENE_ARCHIVE_FOUND -eq 1 ] ; then
			# can stat suplied file.
  			CLUCENE_STATIC_LDFLAGS="${CLUCENE_ARCHIVE}"
  		else
  			# can stat auto file
  			CLUCENE_STATIC_LDFLAGS="${AUTO_CLUCENE_ARCHIVE}"
  		fi
  	fi
fi

####################################################
############ UUID
####################################################

# if --with-static-x, set path as X_ARCHIVE
AC_ARG_WITH(static-uuid,
            AC_HELP_STRING([--with-static-uuid=DIR/libx.a],
            			   [Path to static archive]),
            UUID_ARCHIVE=${withval})

# compilation required
if test [ $COMPILE_UUID -eq 1 -o "$UUID_PATH" == "$SELF" -o "$UUID_ARCHIVE" == "$SELF"] ; then
	COMPILE_UUID=1
	UUID_CFLAGS=$COMPILED_UUID_CFLAGS
    UUID_LDFLAGS=$COMPILED_UUID_LDFLAGS
	UUID_FILES=$COMPILED_UUID_FILES
	UUID_STATIC_LDFLAGS=$COMPILED_UUID_STATIC_LDFLAGS
else

	# if static is required
	if test [ $REQUIRE_STATIC -eq 1 ] ; then
		AC_CHECK_FILE($UUID_ARCHIVE, [UUID_ARCHIVE_FOUND=1], [UUID_ARCHIVE_FOUND=0])
		AUTO_UUID_ARCHIVE=`findstatic "libuuid.a"`

		if test [ $UUID_ARCHIVE_FOUND -eq 0 -a "$AUTO_UUID_ARCHIVE" == "no" ] ; then
			# can't stat files. force compile
  			COMPILE_UUID=1
			UUID_CFLAGS=$COMPILED_UUID_CFLAGS
		    UUID_LDFLAGS=$COMPILED_UUID_LDFLAGS
			UUID_FILES=$COMPILED_UUID_FILES
			UUID_STATIC_LDFLAGS=$COMPILED_UUID_STATIC_LDFLAGS
  		elif test [ $UUID_ARCHIVE_FOUND -eq 1 ] ; then
			# can stat suplied file.
  			UUID_STATIC_LDFLAGS="${UUID_ARCHIVE}"
  		else
  			# can stat auto file
  			UUID_STATIC_LDFLAGS="${AUTO_UUID_ARCHIVE}"
  		fi
  	fi
fi

####################################################
############ SRC/DEPENDENCIES Makefile
####################################################

DEP_LIST=""
if test [ $COMPILE_GECKO_SDK -eq 1 -a $IS_ARM -eq 0 ]
then
    DEP_LIST+=" $COMPILED_GECKO_SDK_PATH/"
    DEP_LIST+=" $XULRUNNER_RUNTIME_PATH/"
fi
if test [ $COMPILE_ZLIB -eq 1 ]
then
    DEP_LIST+=" $COMPILED_ZLIB_FILES"
fi
EMBED_LIBS+=" $ZLIB_FILES"

if test [ $COMPILE_XAPIAN -eq 1 ]
then
    DEP_LIST+=" $COMPILED_XAPIAN_FILES"
fi
EMBED_LIBS+=" $XAPIAN_FILES"

if test [ $COMPILE_ICU -eq 1 ]
then
    DEP_LIST+=" $COMPILED_ICU_FILES"
fi
EMBED_LIBS+=" $ICU_FILES"

if test [ $COMPILE_SQLITE -eq 1 ]
then
    DEP_LIST+=" $COMPILED_SQLITE_FILES"
fi
EMBED_LIBS+=" $SQLITE_FILES"

if test [ $COMPILE_MICROHTTPD -eq 1 ]
then
    DEP_LIST+=" $COMPILED_MICROHTTPD_FILES"
fi
EMBED_LIBS+=" $MICROHTTPD_FILES"

if test [ $COMPILE_LZMA -eq 1 ]
then
    DEP_LIST+=" $COMPILED_LZMA_FILES"
fi
EMBED_LIBS+=" $LZMA_FILES"

if test [ $COMPILE_ARIA2 -eq 1 -a $IS_ARM -eq 0 ]
then
    DEP_LIST+=" $COMPILED_ARIA2_FILES"
fi
if test [ $COMPILE_CLUCENE -eq 1 ]
then
    DEP_LIST+=" $COMPILED_CLUCENE_FILES"
fi
EMBED_LIBS+=" $CLUCENE_FILES"
if test [ $COMPILE_UUID -eq 1 ]
then
    DEP_LIST+=" $COMPILED_UUID_FILES"
fi

DEP_LIST=`echo $DEP_LIST | sed -e "s,$DEP_PATH/,,g"`

####################################################
############ DEPENDENCIES MIRROR
####################################################

# sets URI to dependencies mirror
AC_ARG_WITH(mirror,
			AC_HELP_STRING([--with-mirror=URI], [alternate location for dependencies download]),
			  			   DEP_MIRROR=${withval})

# sets URI to dependencies mirror
AC_ARG_WITH(downloader,
			AC_HELP_STRING([--with-downloader=(wget|curl|command)], [alternate download tool (default is wget)]),
			  			   DOWNLOADERREQ=${withval})

# wget is default
if test [ "$DOWNLOADERREQ" = "" -o "$DOWNLOADERREQ" = "wget" ]
then
	DOWNLOADER="wget -c -O"
elif test [ "$DOWNLOADERREQ" = "curl" ]
then
	DOWNLOADER="curl -C - --retry 10 --retry-delay 1 -o"
else
	DOWNLOADER=$DOWNLOADERREQ
fi

####################################################
############ EXPORTS & OUTPUT
####################################################

# defines for compilation of zimlib
AC_DEFINE_UNQUOTED(CLUSTER_CACHE_SIZE, 16, [set zim cluster cache size to number of cached chunks])
AC_DEFINE_UNQUOTED(DIRENT_CACHE_SIZE, 512, [set zim dirent cache size to number of cached chunks])
AC_DEFINE_UNQUOTED(LZMA_MEMORY_SIZE, 128, [set lzma uncompress memory size to number of MB])
AC_DEFINE(ENABLE_LZMA, [1], [defined if lzma compression is enabled])

# export variables
#CXXFLAGS=" -arch x86_64 $CXXFLAGS"
AC_SUBST(CPATH)
AC_SUBST(CXXFLAGS)
AC_SUBST(CURRENT_PATH)
AC_SUBST(COMPIL_DEPS)
AC_SUBST(STATIC_TMP)
AC_SUBST(SUGAR_TMP)
AC_SUBST(SUGAR_VERSION)
AC_SUBST(EMBED_LIBS)
AC_SUBST(IS_WIN)
AC_SUBST(IS_OSX)
AC_SUBST(IS_LINUX)
AC_SUBST(IS_POSIX)
AC_SUBST(DEP_LIST)
AC_SUBST(IS_64B)
AC_SUBST(IS_ARM)
AC_SUBST(ARCH)
AC_SUBST(DEP_PATH)
AC_SUBST(IS_OLD_GECKO)
AC_SUBST(IS_OLD_ICU)
AC_SUBST(SERVER_BIN)
AC_SUBST(STATIC_BINS)
AC_SUBST(DEP_MIRROR)
AC_SUBST(DOWNLOADER)

AM_CONDITIONAL([COMPIL_DEPS], [test "$COMPIL_DEPS" -eq 1])
AM_CONDITIONAL([IS_WIN], [test "$IS_WIN" -eq 1])
AM_CONDITIONAL([IS_OSX], [test "$IS_OSX" -eq 1])
AM_CONDITIONAL([IS_LINUX], [test "$IS_LINUX" -eq 1])
AM_CONDITIONAL([IS_POSIX], [test "$IS_POSIX" -eq 1])

AM_CONDITIONAL([WITH_COMPONENTS], [test "$WITH_COMPONENTS" -eq 1])
AM_CONDITIONAL([WITH_CLUCENE], [test "$WITH_CLUCENE" -eq 1])
AM_CONDITIONAL([WITH_MANAGER], [test "$WITH_MANAGER" -eq 1])
AM_CONDITIONAL([WITH_SERVER], [test "$WITH_SERVER" -eq 1])
AM_CONDITIONAL([WITH_LAUNCHER], [test "$WITH_LAUNCHER" -eq 1])
AM_CONDITIONAL([WITH_INDEXER], [test "$WITH_INDEXER" -eq 1])
AM_CONDITIONAL([WITH_INSTALLER], [test "$WITH_INSTALLER" -eq 1])
AM_CONDITIONAL([WITH_SEARCHER], [test "$WITH_SEARCHER" -eq 1])
AM_CONDITIONAL([WITH_READER], [test "$WITH_READER" -eq 1])
AM_CONDITIONAL([IS_OLD_GECKO], [test "$IS_OLD_GECKO" -eq 1])
AM_CONDITIONAL([IS_OLD_ICU], [test "$IS_OLD_ICU" -eq 1])
AM_CONDITIONAL([STATIC_BINS], [test "$STATIC_BINS" -eq 1])

AC_SUBST(WITH_COMPONENTS)
AC_SUBST(WITH_CLUCENE)
AC_SUBST(WITH_MANAGER)
AC_SUBST(WITH_SERVER)
AC_SUBST(WITH_LAUNCHER)
AC_SUBST(WITH_INDEXER)
AC_SUBST(WITH_INSTALLER)
AC_SUBST(WITH_SEARCHER)
AC_SUBST(WITH_READER)

AC_SUBST(CTPP2_CFLAGS)
AC_SUBST(CTPP2_LDFLAGS)
AC_SUBST(PUGIXML_CFLAGS)
AC_SUBST(PUGIXML_LDFLAGS)
AC_SUBST(ZIMLIB_CFLAGS)
AC_SUBST(ZIMLIB_LDFLAGS)

AC_SUBST(GECKO_SDK_PATH)
AC_SUBST(XULRUNNER_RUNTIME_PATH)
AC_SUBST(COMPILE_GECKO_SDK)
AC_SUBST(GECKO_VERSION)
AC_SUBST(GECKO_IDL_PATH)
AC_SUBST(LIBXUL_CFLAGS)
AC_SUBST(LIBXUL_LDFLAGS)
AM_CONDITIONAL([HAVE_XPIDL], [test "$HAVE_XPIDL"])
AC_SUBST(XPIDL)
AC_SUBST(HEADER_PY)
AC_SUBST(TYPELIB_PY)

AC_SUBST(ZLIB_CFLAGS)
AC_SUBST(ZLIB_LDFLAGS)
AC_SUBST(ZLIB_STATIC_LDFLAGS)
AC_SUBST(COMPILE_ZLIB)
AC_SUBST(ZLIB_FILES)

AC_SUBST(XAPIAN_CFLAGS)
AC_SUBST(XAPIAN_LDFLAGS)
AC_SUBST(XAPIAN_STATIC_LDFLAGS)
AC_SUBST(COMPILE_XAPIAN)
AC_SUBST(XAPIAN_FILES)
AC_SUBST(XAPIAN_COMPACT)

AC_SUBST(ICU_CFLAGS)
AC_SUBST(ICU_LDFLAGS)
AC_SUBST(ICU_STATIC_LDFLAGS)
AC_SUBST(COMPILE_ICU)
AC_SUBST(ICU_FILES)

AC_SUBST(SQLITE_CFLAGS)
AC_SUBST(SQLITE_LDFLAGS)
AC_SUBST(SQLITE_STATIC_LDFLAGS)
AC_SUBST(COMPILE_SQLITE)
AC_SUBST(SQLITE_FILES)

AC_SUBST(MICROHTTPD_CFLAGS)
AC_SUBST(MICROHTTPD_LDFLAGS)
AC_SUBST(MICROHTTPD_STATIC_LDFLAGS)
AC_SUBST(COMPILE_MICROHTTPD)
AC_SUBST(MICROHTTPD_FILES)

AC_SUBST(LZMA_CFLAGS)
AC_SUBST(LZMA_LDFLAGS)
AC_SUBST(LZMA_STATIC_LDFLAGS)
AC_SUBST(COMPILE_LZMA)
AC_SUBST(LZMA_FILES)

AC_SUBST(ARIA2_CFLAGS)
AC_SUBST(ARIA2_LDFLAGS)
AC_SUBST(COMPILE_ARIA2)
AC_SUBST(ARIA2_FILES)

AC_SUBST(CLUCENE_CFLAGS)
AC_SUBST(CLUCENE_LDFLAGS)
AC_SUBST(CLUCENE_STATIC_LDFLAGS)
AC_SUBST(COMPILE_CLUCENE)
AC_SUBST(CLUCENE_FILES)

AC_SUBST(UUID_CFLAGS)
AC_SUBST(UUID_LDFLAGS)
AC_SUBST(UUID_STATIC_LDFLAGS)
AC_SUBST(COMPILE_UUID)
AC_SUBST(UUID_FILES)

# Configure the output files
AC_CONFIG_FILES([
  Makefile
  src/Makefile
  src/dependencies/Makefile
  src/zimlib/Makefile
  src/zimlib/src/Makefile
  src/ctpp2/Makefile
  src/ctpp2/src/Makefile
  src/pugixml/Makefile

  src/components/Makefile
  src/components/xapianAccessor/Makefile
  src/components/zimAccessor/Makefile
  src/components/zimXapianIndexer/Makefile
  src/components/zimCluceneIndexer/Makefile
  src/components/cluceneAccessor/Makefile
  src/components/contentManager/Makefile
  src/components/serverManager/Makefile

  src/launcher/Makefile
  src/server/Makefile
  src/manager/Makefile
  src/indexer/Makefile
  src/searcher/Makefile
  src/reader/Makefile
  src/installer/Makefile
  kiwix/Makefile
  kiwix/chrome/Makefile
  kiwix/defaults/Makefile
  kiwix/components/Makefile
  desktop/Makefile
  static/Makefile
  etc/Makefile
])

AC_PROG_INSTALL
AC_OUTPUT

####################################################
############ NOTICE
####################################################
# using the binary echo program instead of shell function
# since OSX default (SH) does not support -n.
BINECHO=`which echo`
$BINECHO ""
$BINECHO "Build details:"
$BINECHO -n "ARCH			" ; $BINECHO $ARCH
$BINECHO -n "IS_64B			" ; yesno $IS_64B
$BINECHO -n "IS_ARM			" ; yesno $IS_ARM
$BINECHO -n "IS_POSIX		" ; yesno $IS_POSIX
$BINECHO -n "IS_LINUX		" ; yesno $IS_LINUX
$BINECHO -n "IS_OSX			" ; yesno $IS_OSX
$BINECHO -n "IS_WIN			" ; yesno $IS_WIN
$BINECHO -n "IS_OLD_GECKO		" ; yesno $IS_OLD_GECKO
$BINECHO -n "IS_OLD_ICU		" ; yesno $IS_OLD_ICU
$BINECHO -n "COMPIL_DEPS		" ; yesno $COMPIL_DEPS
$BINECHO -n "WITH_COMPONENTS		" ; yesno $WITH_COMPONENTS
$BINECHO -n "STATIC_BINS		" ; yesno $STATIC_BINS
$BINECHO -n "WITH_MANAGER		" ; yesno $WITH_MANAGER
$BINECHO -n "WITH_SERVER		" ; yesno $WITH_SERVER
$BINECHO -n "WITH_LAUNCHER		" ; yesno $WITH_LAUNCHER
$BINECHO -n "WITH_INDEXER		" ; yesno $WITH_INDEXER
$BINECHO -n "WITH_INSTALLER		" ; yesno $WITH_INSTALLER
$BINECHO -n "WITH_SEARCHER		" ; yesno $WITH_SEARCHER
$BINECHO -n "WITH_READER		" ; yesno $WITH_READER
echo ""
$BINECHO -n "DEP_MIRROR		" ; $BINECHO $DEP_MIRROR
$BINECHO -n "DOWNLOADER		" ; $BINECHO $DOWNLOADER
$BINECHO -n "DEP_LIST		" ; $BINECHO $DEP_LIST
echo ""
$BINECHO -n "EMBED_LIBS		" ; $BINECHO $EMBED_LIBS
echo ""
$BINECHO -n "CC			" ; $BINECHO $CC
$BINECHO -n "CXX			" ; $BINECHO $CXX
$BINECHO -n "CPP			" ; $BINECHO $CPP
$BINECHO -n "CXXCPP			" ; $BINECHO $CXXCPP
$BINECHO -n "CFLAGS			" ; $BINECHO $CFLAGS
$BINECHO -n "CXXFLAGS		" ; $BINECHO $CXXFLAGS
$BINECHO ""
$BINECHO -n "GECKO_SDK_PATH		" ; $BINECHO $GECKO_SDK_PATH
$BINECHO -n "XULRUNNER_RUNTIME_PATH	" ; $BINECHO $XULRUNNER_RUNTIME_PATH
$BINECHO -n "ZLIB_LDFLAGS		" ; $BINECHO $ZLIB_LDFLAGS
$BINECHO -n "XAPIAN_LDFLAGS		" ; $BINECHO $XAPIAN_LDFLAGS
$BINECHO -n "SQLITE_LDFLAGS		" ; $BINECHO $SQLITE_LDFLAGS
$BINECHO -n "MICROHTTPD_LDFLAGS	" ; $BINECHO $MICROHTTPD_LDFLAGS
$BINECHO -n "LZMA_LDFLAGS		" ; $BINECHO $LZMA_LDFLAGS
$BINECHO -n "ARIA2_FILES		" ; $BINECHO $ARIA2_FILES
$BINECHO -n "CLUCENE_LDFLAGS		" ; $BINECHO $CLUCENE_LDFLAGS
$BINECHO -n "ICU_LDFLAGS		" ; $BINECHO $ICU_LDFLAGS
$BINECHO -n "XAPIAN_COMPACT		" ; $BINECHO $XAPIAN_COMPACT
$BINECHO -n "UUID_LDFLAGS		" ; $BINECHO $UUID_LDFLAGS
echo ""
$BINECHO -n "ZLIB_STATIC_LDFLAGS		" ; $BINECHO $ZLIB_STATIC_LDFLAGS
$BINECHO -n "XAPIAN_STATIC_LDFLAGS		" ; $BINECHO $XAPIAN_STATIC_LDFLAGS
$BINECHO -n "SQLITE_STATIC_LDFLAGS		" ; $BINECHO $SQLITE_STATIC_LDFLAGS
$BINECHO -n "MICROHTTPD_STATIC_LDFLAGS	" ; $BINECHO $MICROHTTPD_STATIC_LDFLAGS
$BINECHO -n "LZMA_STATIC_LDFLAGS		" ; $BINECHO $LZMA_STATIC_LDFLAGS
$BINECHO -n "CLUCENE_STATIC_LDFLAGS		" ; $BINECHO $CLUCENE_STATIC_LDFLAGS
$BINECHO -n "UUID_STATIC_LDFLAGS		" ; $BINECHO $UUID_STATIC_LDFLAGS
$BINECHO -n "ICU_STATIC_LDFLAGS		" ; $BINECHO $ICU_STATIC_LDFLAGS

if test "$IS_64B"
then
	$BINECHO ""
	$BINECHO "/!\ When linking static archive (.a file) on 64b system, the archive must have been compiled with -fPIC. If not, compilation will fail with “Bad Value” message."
fi

if [[ $MISSING_SELF_DEPS -eq 1 ]]
then
	$BINECHO "
******************

You have unmet dependencies.
Those dependencies will be downloaded and compiled during the make process.
You NEED to make src/dependencies first THEN re-run configure and make the rest.

******************"
fi
$BINECHO ""